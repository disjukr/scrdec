const pickTable = [1, 2, 0, 1, 2, 0, 2, 0, 0, 2, 0, 2, 1, 0, 2, 0, 1, 0, 2, 0, 1, 1, 2, 0, 0, 2, 1, 0, 2, 0, 0, 2, 1, 1, 0, 2, 0, 2, 0, 1, 0, 1, 1, 2, 0, 1, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 2];
const table = [
    [,,,,,,,,,123,,,,,,,,,,,,,,,,,,,,,,,50,48,33,41,91,56,51,61,88,58,53,101,57,92,86,115,102,78,69,107,98,89,120,94,125,74,109,113,,96,,83,,66,39,72,114,117,49,55,77,82,34,84,106,71,100,45,32,,46,76,93,126,108,111,121,116,67,38,118,37,36,43,40,35,65,52,9,42,68,63,119,59,85,105,97,99,80,103,81,73,79,70,104,124,54,112,110,122,47,95,75,90,44,87],
    [,,,,,,,,,87,,,,,,,,,,,,,,,,,,,,,,,46,71,122,86,66,106,47,38,73,65,52,50,91,118,114,67,56,57,112,69,104,113,79,9,98,68,35,117,,126,,94,,119,74,97,93,34,75,111,78,59,76,80,103,42,125,116,84,43,45,44,48,110,107,102,53,37,33,100,77,82,99,63,123,120,41,40,115,89,51,,109,85,83,124,58,95,101,70,88,49,105,108,90,72,39,92,61,36,121,55,96,81,32,54],
    [,,,,,,,,,110,,,,,,,,,,,,,,,,,,,,,,,45,117,82,96,113,94,73,92,98,125,41,54,32,124,122,,107,99,51,43,104,81,102,118,49,100,84,67,,58,,126,,69,44,42,116,39,55,68,121,89,47,111,38,114,106,57,123,63,56,119,103,83,71,52,120,93,48,35,90,91,108,72,85,112,105,46,76,33,36,78,80,9,86,115,53,97,75,88,59,87,34,109,77,37,40,70,74,50,65,61,95,79,66,101],
];
const digits = [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,62,,,,63,52,53,54,55,56,57,58,59,60,61,,,,,,,,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,,,,,,,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51];

function unescape(char: string) {
    if (char.charCodeAt(0) > 126) return char;
    const index = '#&!*$'.indexOf(char);
    if (index !== -1) return '\r\n<>@'.substr(index, 1);
    return '?';
}

export default function scrdec(input: string) {
    let s = 0;
    let e = -1;
    let p = 0;
    let len = 0;
    let result = [];
    const marker = '#@~^';
    while (true) {
        e = input.indexOf(marker, s);
        if (e !== -1) {
            result.push(input.substring(s, e));
            e += marker.length;
        } else {
            result.push(input.substr(s, input.length));
            return result.join('');
        }
        const string = input.substr(e, 6);
        len = (
            (digits[string.charCodeAt(0)]! << 2) +
            (digits[string.charCodeAt(1)]! >> 4) +
            ((digits[string.charCodeAt(1)]! & 0xf) << 12) +
            ((digits[string.charCodeAt(2)]! >> 2) << 8) +
            ((digits[string.charCodeAt(2)]! & 0x3) << 22) +
            (digits[string.charCodeAt(3)]! << 16)
        );
        e += (6 + '=='.length);
        decode: while (true) {
            if (!len) {
                s = e + 'DQgAAA==^#~@'.length;
                p = 0;
                break decode;
            }
            const char = input.charAt(e);
            if (char === '@') {
                result.push(unescape(input.charAt(++e)));
                ++e;
                len -= 2;
                ++p;
            } else {
                if (char.charCodeAt(0) < 0xff) {
                    result.push(String.fromCharCode(
                        table[pickTable[p % 64]][char.charCodeAt(0)]!,
                    ));
                    ++p;
                } else {
                    result.push(char);
                }
                ++e;
                --len;
            }
        }
    }
}
